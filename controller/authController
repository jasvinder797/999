const { promisify } = require('util');
const crypto = require('crypto');
const jwt = require('jsonwebtoken');
const User = require('../models/userModel');
const catchAsync = require('../utils/catchAsync');
const AppError = require('../utils/appError');
const sendMail = require('../utils/email');
const signToken = (id) => {
  return jwt.sign({ id }, process.env.JWT_SECRET, {
    expiresIn: process.env.JWT_EXPIRES_IN,
  });
};
exports.signup = catchAsync(async (req, res, next) => {
  const newUser = await User.create({
    name: req.body.name,
    email: req.body.email,
    password: req.body.password,
    passwordConfirm: req.body.passwordConfirm,
    role: req.body.role,
  });
  const token = signToken(newUser._id);
  res.status(201).json({
    status: 'success',
    token,
    data: {
      user: newUser,
    },
  });
});

exports.signin = catchAsync(async (req, res, next) => {
  // check if email and password provided
  const { email, password } = req.body;
  if (!email || !password)
    return next(new AppError('Please provide email and password', 400)); // 400 for bad request
  // check if user exist and passowrd is correct
  const user = await User.findOne({ email }).select('+password');
  console.log(await user.correctPassword(password, user.password));
  if (!user || !(await user.correctPassword(password, user.password))) {
    return next(new AppError('Provided email or password is incorrect', 401));
  }
  // if everything ok send token to user
  const token = signToken(user._id);
  res.status(200).send({
    status: 'success',
    token,
  });
});

exports.protect = catchAsync(async (req, res, next) => {
  // Get token from header
  let token;
  if (
    req.headers.authorization ||
    req.headers.authorization.startswith('Bearer ')
  ) {
    token = req.headers.authorization.split(' ')[1];
  }
  if (!token) {
    return next(
      new AppError('Your are not logged in. Please log in to get access ', 401),
    );
  }
  // Token Verification
  const decoded = await promisify(jwt.verify)(token, process.env.JWT_SECRET);
  console.log(decoded);
  // check if user still exists for which token was issued
  const currentUser = await User.findById(decoded.id);
  if (!currentUser) {
    return next(
      new AppError('User belonging to provided token does not exist!', 401),
    );
  }
  // Check if user has changed password after token was issued
  if (currentUser.changedPasswordAfter(decoded.iat)) {
    return next(
      new AppError('User changed password recently! Please login again', 401),
    );
  }
  req.user = currentUser;
  // if everything is ok call next middleware
  next();
});

exports.restrictTo = (...roles) => {
  return (req, res, next) => {
    console.log(roles.includes(req.user.role));

    if (!roles.includes(req.user.role)) {
      return next(
        new AppError('You have permissions to perform this action', 403),
      );
    }
    next();
  };
};

exports.forgotPassword = catchAsync(async (req, res, next) => {
  // 1) get user baed on email posted
  const user = await User.findOne({ email: req.body.email });
  if (!user) {
    return next(new AppError('There is no user with provided email', 404));
  }
  // 2) Create a password reset token string
  const resetToken = user.createPasswordResetToken();
  await user.save({ validateBeforeSave: false });
  // 3) Send the token in email
  const resetUrl = `${req.protocol}://${req.get('host')}/api/v1/users/resetPassword/${resetToken}`;
  const message = `Forgot your password. Please make PATCH requested on ${resetUrl}. Please ignore if this request not made by you`;
  try {
    await sendMail({
      email: user.email,
      message,
      subject: 'Your password reset token (Valid for 10 minutes)',
    });

    res.status(200).json({
      status: 'success',
      message: 'Password reset link sent on email',
    });
  } catch (e) {
    user.passwordResetToken = undefined;
    user.passwrodResetExpiries = undefined;
    await user.save({ validateBeforeSave: false });
    return next(
      new AppError(
        'Something went wrong while sending email. Please try again',
        500,
      ),
    );
  }
});

exports.resetPassword = catchAsync(async (req, res, next) => {
  console.log(req.params.token);
  // 1) Get the user based on token
  const hashedToken = crypto
    .createHash('sha256')
    .update(req.params.token)
    .digest('hex');
  console.log(hashedToken);
  const user = await User.findOne({
    passwordResetToken: hashedToken,
    passwordResetExpires: { $gt: Date.now() },
  });
  console.log(user);
  // 2) If token is not expired and there is user set new password
  if (!user) {
    return next(new AppError('Token is invalid or expired', 400));
  }
  user.password = req.body.password;
  user.passwordConfirm = req.body.passwordConfirm;
  user.passwordResetToken = undefined;
  user.passwordResetExpires = undefined;
  await user.save();
  // 3) UPdate passwordChangedAt property for the user
  // 4) Log the user in, send jwt
  const token = signToken(user._id);
  res.status(200).json({
    status: 'success',
    token,
  });
});
